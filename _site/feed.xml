<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Geek5</title>
		<description>Software engineer obsessed with Web technologies</description>
		<link>https://geek5.cn</link>
		<atom:link href="https://geek5.cn/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>WebStorm快捷键</title>
				<description>&lt;h2&gt;webstorm常用快捷键整理&lt;/h2&gt;

&lt;!--more--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;//写代码
Ctrl + X    删除行
Ctrl + D    复制行
Ctrl + Delete   删除光标至单词结束
Ctrl + Backspace    删除光标至单词开始
Ctrl + Shift + Up / Down    代码向上/下移动
Shift + Enter   重新开始一行（无论光标在哪个位置）
双击Shift 根据输入的关键字查看文件、类、方法、属性
Ctrl + / 或 Ctrl + Shift + /   注释（// 或者/*…*/ ）
Ctrl + Alt + L  格式化代码
写代码，按Tab  生成代码

//读代码
Ctrl + B 或 Ctrl + 鼠标左键单击  快速打开光标处的类或方法，（NB的功能）
Alt + Up / Down 跳转到上一个/下一个方法
Ctrl + Shift + I    快速查看某个方法的实现代码
Ctrl + P    方法参数提示
Ctrl + E    弹出最近打开的文件
F2 或 Shift + F2   高亮错误或警告快速定位
Ctrl + Shift + F7   高亮显示所有该文本，按Esc高亮消失，和 Ctrl + F 效果相同。&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;因为这个功能我就可以发放心的放弃sublime了&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

//重构代码
Shift+F6    重构-重命名


//查找替换代码
Ctrl + R    替换文本
Ctrl + F    查找文本
F3  查找下一个
Shift+F3    查找上一个


//其它快捷键
F11 切换书签状态，就是sublime text 的F2
Ctrl + G    查找行
Ctrl + Alt + S  打开配置窗口
Ctrl + Alt + T  with…（if, &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;, try, catch, &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;, etc）用 * 来围绕选中的代码行，（ * 包括 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; 、 &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; 、 try catch 等）
Ctrl + Shift + F12  // 切换最大化编辑器
Alt + Shift + F //添至收藏夹
Ctrl + Shift + U    光标所在位置大小写
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>2017-06-06T00:00:00+00:00</pubDate>
				<link>https://geek5.cn/blog/2017/06/06/WebStorm-common-shortcut-key.html</link>
				<guid isPermaLink="true">https://geek5.cn/blog/2017/06/06/WebStorm-common-shortcut-key.html</guid>
			</item>
		
			<item>
				<title>ECLIPSE常用快捷键</title>
				<description>&lt;h2&gt;现在工作环境要用eclipse  - -!!! 整理一下快捷键，虽然以前就用过和知道，但因为现在脑子里有好几套快捷键，程序狂狗都懂的。&lt;/h2&gt;

&lt;!--more--&gt;

&lt;p&gt;Ctrl+Q 最后编辑的地方&lt;br&gt;
Ctrl+1 快速修复&lt;br&gt;
Alt+/ 全局 内容辅助(代码提示)    &lt;/p&gt;

&lt;p&gt;Ctrl+Shift+O 自动导入所需要的包&lt;br&gt;
Ctrl+Shift+F 格式化当前代码  &lt;/p&gt;

&lt;p&gt;Ctrl+D: 删除当前行&lt;br&gt;
Ctrl+Alt+↓ 复制当前行到下一行(复制增加)&lt;br&gt;
Ctrl+Alt+↑ 复制当前行到上一行(复制增加)&lt;br&gt;
Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)&lt;br&gt;
Alt+↑ 当前行和上面一行交互位置(同上)  &lt;/p&gt;

&lt;p&gt;Alt+Shift+Z 重构的后悔药(Undo)  &lt;/p&gt;

&lt;p&gt;Ctrl+Shift+R 全局 打开资源(类似INTELLIJ双SHIFT)&lt;/p&gt;

&lt;h2&gt;可以不用记得，会用电脑的都知道&lt;/h2&gt;

&lt;p&gt;Ctrl+F 全局 查找并替换&lt;br&gt;
Ctrl+Z 全局 撤销&lt;br&gt;
Ctrl+C 全局 复制&lt;br&gt;
Ctrl+X 全局 剪切  &lt;/p&gt;
</description>
				<pubDate>2017-04-01T00:00:00+00:00</pubDate>
				<link>https://geek5.cn/blog/2017/04/01/ECLIPSE-common-shortcut-key.html</link>
				<guid isPermaLink="true">https://geek5.cn/blog/2017/04/01/ECLIPSE-common-shortcut-key.html</guid>
			</item>
		
			<item>
				<title>GIT常用命令整理</title>
				<description>&lt;p&gt;博主整理非常好摘过来了
&amp;lt;!--more--&amp;gt;&lt;/p&gt;

&lt;h2&gt;初始化配置&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#配置使用git仓库的人员姓名&lt;/span&gt;
git config --global user.name &lt;span class=&quot;s2&quot;&gt;&amp;quot;Your Name Comes Here&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#配置使用git仓库的人员email&lt;/span&gt;
git config --global user.email you@yourdomain.example.com

&lt;span class=&quot;c&quot;&gt;#配置到缓存 默认15分钟&lt;/span&gt;
git config --global credential.helper cache 

&lt;span class=&quot;c&quot;&gt;#修改缓存时间&lt;/span&gt;
git config --global credential.helper &lt;span class=&quot;s1&quot;&gt;&amp;#39;cache --timeout=3600&amp;#39;&lt;/span&gt;  

git config --global color.ui &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global core.editor &lt;span class=&quot;s2&quot;&gt;&amp;quot;mate -w&amp;quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 设置Editor使用textmate&lt;/span&gt;
git config -1 &lt;span class=&quot;c&quot;&gt;#列举所有配置&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#用户的git配置文件~/.gitconfig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;查看、添加、提交、删除、找回，重置修改文件&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt; &amp;lt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&amp;gt;  &lt;span class=&quot;c&quot;&gt;# 显示command的help&lt;/span&gt;
git show            &lt;span class=&quot;c&quot;&gt;# 显示某次提交的内容&lt;/span&gt;
git show &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;

git co  -- &amp;lt;file&amp;gt;   &lt;span class=&quot;c&quot;&gt;# 抛弃工作区修改&lt;/span&gt;
git co  .           &lt;span class=&quot;c&quot;&gt;# 抛弃工作区修改&lt;/span&gt;

git add &amp;lt;file&amp;gt;      &lt;span class=&quot;c&quot;&gt;# 将工作文件修改提交到本地暂存区&lt;/span&gt;
git add .           &lt;span class=&quot;c&quot;&gt;# 将所有修改过的工作文件提交暂存区&lt;/span&gt;

git rm &amp;lt;file&amp;gt;       &lt;span class=&quot;c&quot;&gt;# 从版本库中删除文件&lt;/span&gt;
git rm &amp;lt;file&amp;gt; --cached  &lt;span class=&quot;c&quot;&gt;# 从版本库中删除文件，但不删除文件&lt;/span&gt;

git reset &amp;lt;file&amp;gt;    &lt;span class=&quot;c&quot;&gt;# 从暂存区恢复到工作文件&lt;/span&gt;
git reset -- .      &lt;span class=&quot;c&quot;&gt;# 从暂存区恢复到工作文件&lt;/span&gt;
git reset --hard    &lt;span class=&quot;c&quot;&gt;# 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改&lt;/span&gt;

git ci &amp;lt;file&amp;gt;
git ci .
git ci -a           &lt;span class=&quot;c&quot;&gt;# 将git add, git rm和git ci等操作都合并在一起做&lt;/span&gt;
git ci -am &lt;span class=&quot;s2&quot;&gt;&amp;quot;some comments&amp;quot;&lt;/span&gt;
git ci --amend      &lt;span class=&quot;c&quot;&gt;# 修改最后一次提交记录&lt;/span&gt;

git revert &amp;lt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&amp;gt;    &lt;span class=&quot;c&quot;&gt;# 恢复某次提交的状态，恢复动作本身也创建了一次提交对象&lt;/span&gt;
git revert HEAD     &lt;span class=&quot;c&quot;&gt;# 恢复最后一次提交的状态&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;查看文件diff&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git diff &amp;lt;file&amp;gt;     &lt;span class=&quot;c&quot;&gt;# 比较当前文件和暂存区文件差异&lt;/span&gt;
git diff
git diff &amp;lt;&lt;span class=&quot;nv&quot;&gt;$id1&lt;/span&gt;&amp;gt; &amp;lt;&lt;span class=&quot;nv&quot;&gt;$id2&lt;/span&gt;&amp;gt;   &lt;span class=&quot;c&quot;&gt;# 比较两次提交之间的差异&lt;/span&gt;
git diff &amp;lt;branch1&amp;gt;..&amp;lt;branch2&amp;gt; &lt;span class=&quot;c&quot;&gt;# 在两个分支之间比较&lt;/span&gt;
git diff --staged   &lt;span class=&quot;c&quot;&gt;# 比较暂存区和版本库差异&lt;/span&gt;
git diff --cached   &lt;span class=&quot;c&quot;&gt;# 比较暂存区和版本库差异&lt;/span&gt;
git diff --stat     &lt;span class=&quot;c&quot;&gt;# 仅仅比较统计信息&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;查看提交记录&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git log
git log &amp;lt;file&amp;gt;      &lt;span class=&quot;c&quot;&gt;# 查看该文件每次提交记录&lt;/span&gt;
git log -p &amp;lt;file&amp;gt;   &lt;span class=&quot;c&quot;&gt;# 查看每次详细修改内容的diff&lt;/span&gt;
git log -p -2       &lt;span class=&quot;c&quot;&gt;# 查看最近两次详细修改内容的diff&lt;/span&gt;
git log --stat      &lt;span class=&quot;c&quot;&gt;#查看提交统计信息&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;取得Git仓库&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#初始化一个版本仓库&lt;/span&gt;
git init

&lt;span class=&quot;c&quot;&gt;#Clone远程版本库&lt;/span&gt;
git clone git@xbc.me:wordpress.git

&lt;span class=&quot;c&quot;&gt;#添加远程版本库origin，语法为 git remote add [shortname] [url]&lt;/span&gt;
git remote add origin git@xbc.me:wordpress.git

&lt;span class=&quot;c&quot;&gt;#查看远程仓库&lt;/span&gt;
git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;提交你的修改&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#添加当前修改的文件到暂存区&lt;/span&gt;
git add .

&lt;span class=&quot;c&quot;&gt;#如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件&lt;/span&gt;
git add -u

&lt;span class=&quot;c&quot;&gt;#提交你的修改&lt;/span&gt;
git commit –m &lt;span class=&quot;s2&quot;&gt;&amp;quot;你的注释&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]&lt;/span&gt;
git push origin master

&lt;span class=&quot;c&quot;&gt;#查看文件状态&lt;/span&gt;
git status

&lt;span class=&quot;c&quot;&gt;#跟踪新文件&lt;/span&gt;
git add readme.txt

&lt;span class=&quot;c&quot;&gt;#从当前跟踪列表移除文件，并完全删除&lt;/span&gt;
git rm readme.txt

&lt;span class=&quot;c&quot;&gt;#仅在暂存区删除，保留文件在当前目录，不再跟踪&lt;/span&gt;
git rm –cached readme.txt

&lt;span class=&quot;c&quot;&gt;#重命名文件&lt;/span&gt;
git mv reademe.txt readme

&lt;span class=&quot;c&quot;&gt;#查看提交的历史记录&lt;/span&gt;
git log

&lt;span class=&quot;c&quot;&gt;#修改最后一次提交注释的，利用–amend参数&lt;/span&gt;
git commit --amend

&lt;span class=&quot;c&quot;&gt;#忘记提交某些修改，下面的三条命令只会得到一个提交。&lt;/span&gt;
git commit –m &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;quot&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;add readme.txt&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;quot&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
git add readme_forgotten
git commit –amend

&lt;span class=&quot;c&quot;&gt;#假设你已经使用git add .，将修改过的文件a、b加到暂存区&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#现在你只想提交a文件，不想提交b文件，应该这样&lt;/span&gt;
git reset HEAD b

&lt;span class=&quot;c&quot;&gt;#取消对文件的修改&lt;/span&gt;
git checkout –- readme.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;查看、切换、创建和删除分支&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git br -r           &lt;span class=&quot;c&quot;&gt;# 查看远程分支&lt;/span&gt;
git br &amp;lt;new_branch&amp;gt; &lt;span class=&quot;c&quot;&gt;# 创建新的分支&lt;/span&gt;
git br -v           &lt;span class=&quot;c&quot;&gt;# 查看各个分支最后提交信息&lt;/span&gt;
git br --merged     &lt;span class=&quot;c&quot;&gt;# 查看已经被合并到当前分支的分支&lt;/span&gt;
git br --no-merged  &lt;span class=&quot;c&quot;&gt;# 查看尚未被合并到当前分支的分支&lt;/span&gt;

git co &amp;lt;branch&amp;gt;     &lt;span class=&quot;c&quot;&gt;# 切换到某个分支&lt;/span&gt;
git co -b &amp;lt;new_branch&amp;gt; &lt;span class=&quot;c&quot;&gt;# 创建新的分支，并且切换过去&lt;/span&gt;
git co -b &amp;lt;new_branch&amp;gt; &amp;lt;branch&amp;gt;  &lt;span class=&quot;c&quot;&gt;# 基于branch创建新的new_branch&lt;/span&gt;

git co &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;# 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除&lt;/span&gt;
git co &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt; -b &amp;lt;new_branch&amp;gt;  &lt;span class=&quot;c&quot;&gt;# 把某次历史提交记录checkout出来，创建成一个分支&lt;/span&gt;

git br -d &amp;lt;branch&amp;gt;  &lt;span class=&quot;c&quot;&gt;# 删除某个分支&lt;/span&gt;
git br -D &amp;lt;branch&amp;gt;  &lt;span class=&quot;c&quot;&gt;# 强制删除某个分支 (未被合并的分支被删除的时候需要强制)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;分支合并和rebase&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git merge &amp;lt;branch&amp;gt;               &lt;span class=&quot;c&quot;&gt;# 将branch分支合并到当前分支&lt;/span&gt;
git merge origin/master --no-ff  &lt;span class=&quot;c&quot;&gt;# 不要Fast-Foward合并，这样可以生成merge提交&lt;/span&gt;

git rebase master &amp;lt;branch&amp;gt;       &lt;span class=&quot;c&quot;&gt;# 将master rebase到branch，相当于：&lt;/span&gt;
git co &amp;lt;branch&amp;gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git rebase master &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git co master &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git merge &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Git补丁管理(方便在多台机器上开发同步时用)&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git diff &amp;gt; ../sync.patch         &lt;span class=&quot;c&quot;&gt;# 生成补丁&lt;/span&gt;
git apply ../sync.patch          &lt;span class=&quot;c&quot;&gt;# 打补丁&lt;/span&gt;
git apply --check ../sync.patch  &lt;span class=&quot;c&quot;&gt;#测试补丁能否成功&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Git暂存管理&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git stash                        &lt;span class=&quot;c&quot;&gt;# 暂存&lt;/span&gt;
git stash list                   &lt;span class=&quot;c&quot;&gt;# 列所有stash&lt;/span&gt;
git stash apply                  &lt;span class=&quot;c&quot;&gt;# 恢复暂存的内容&lt;/span&gt;
git stash drop                   &lt;span class=&quot;c&quot;&gt;# 删除暂存区&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Git远程分支管理&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git pull                         &lt;span class=&quot;c&quot;&gt;# 抓取远程仓库所有分支更新并合并到本地&lt;/span&gt;
git pull --no-ff                 &lt;span class=&quot;c&quot;&gt;# 抓取远程仓库所有分支更新并合并到本地，不要快进合并&lt;/span&gt;
git fetch origin                 &lt;span class=&quot;c&quot;&gt;# 抓取远程仓库更新&lt;/span&gt;
git merge origin/master          &lt;span class=&quot;c&quot;&gt;# 将远程主分支合并到本地当前分支&lt;/span&gt;
git co --track origin/branch     &lt;span class=&quot;c&quot;&gt;# 跟踪某个远程分支创建相应的本地分支&lt;/span&gt;
git co -b &amp;lt;local_branch&amp;gt; origin/&amp;lt;remote_branch&amp;gt;  &lt;span class=&quot;c&quot;&gt;# 基于远程分支创建本地分支，功能同上&lt;/span&gt;

git push                         &lt;span class=&quot;c&quot;&gt;# push所有分支&lt;/span&gt;
git push origin master           &lt;span class=&quot;c&quot;&gt;# 将本地主分支推到远程主分支&lt;/span&gt;
git push -u origin master        &lt;span class=&quot;c&quot;&gt;# 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)&lt;/span&gt;
git push origin &amp;lt;local_branch&amp;gt;   &lt;span class=&quot;c&quot;&gt;# 创建远程分支， origin是远程仓库名&lt;/span&gt;
git push origin &amp;lt;local_branch&amp;gt;:&amp;lt;remote_branch&amp;gt;  &lt;span class=&quot;c&quot;&gt;# 创建远程分支&lt;/span&gt;
git push origin :&amp;lt;remote_branch&amp;gt;  &lt;span class=&quot;c&quot;&gt;#先删除本地分支(git br -d &amp;lt;branch&amp;gt;)，然后再push删除远程分支&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;基本的分支管理&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#创建一个分支&lt;/span&gt;
git branch iss53

&lt;span class=&quot;c&quot;&gt;#切换工作目录到iss53&lt;/span&gt;
git chekcout iss53

&lt;span class=&quot;c&quot;&gt;#将上面的命令合在一起，创建iss53分支并切换到iss53&lt;/span&gt;
git chekcout –b iss53

&lt;span class=&quot;c&quot;&gt;#合并iss53分支，当前工作目录为master&lt;/span&gt;
git merge iss53

&lt;span class=&quot;c&quot;&gt;#合并完成后，没有出现冲突，删除iss53分支&lt;/span&gt;
git branch –d iss53

&lt;span class=&quot;c&quot;&gt;#拉去远程仓库的数据，语法为 git fetch [remote-name]&lt;/span&gt;
git fetch

&lt;span class=&quot;c&quot;&gt;#fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并&lt;/span&gt;
git pull

&lt;span class=&quot;c&quot;&gt;#查看远程仓库的信息&lt;/span&gt;
git remote show origin

&lt;span class=&quot;c&quot;&gt;#建立本地的dev分支追踪远程仓库的develop分支&lt;/span&gt;
git checkout –b dev origin/develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Git远程仓库管理&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote -v                    &lt;span class=&quot;c&quot;&gt;# 查看远程服务器地址和仓库名称&lt;/span&gt;
git remote show origin           &lt;span class=&quot;c&quot;&gt;# 查看远程服务器仓库状态&lt;/span&gt;
git remote add origin git@ github:robbin/robbin_site.git         &lt;span class=&quot;c&quot;&gt;# 添加远程仓库地址&lt;/span&gt;
git remote &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-url origin git@ github.com:robbin/robbin_site.git &lt;span class=&quot;c&quot;&gt;# 设置远程仓库地址(用于修改远程仓库地址)&lt;/span&gt;
git remote rm &amp;lt;repository&amp;gt;       &lt;span class=&quot;c&quot;&gt;# 删除远程仓库&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;创建远程仓库&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone --bare robbin_site robbin_site.git  &lt;span class=&quot;c&quot;&gt;# 用带版本的项目创建纯版本仓库&lt;/span&gt;
scp -r my_project.git git@ git.csdn.net:~      &lt;span class=&quot;c&quot;&gt;# 将纯仓库上传到服务器上&lt;/span&gt;

mkdir robbin_site.git &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;robbin_site.git &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git --bare init &lt;span class=&quot;c&quot;&gt;# 在服务器创建纯仓库&lt;/span&gt;
git remote add origin git@ github.com:robbin/robbin_site.git    &lt;span class=&quot;c&quot;&gt;# 设置远程仓库地址&lt;/span&gt;
git push -u origin master                                      &lt;span class=&quot;c&quot;&gt;# 客户端首次提交&lt;/span&gt;
git push -u origin develop  &lt;span class=&quot;c&quot;&gt;# 首次将本地develop分支提交到远程develop分支，并且track&lt;/span&gt;

git remote &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-head origin master   &lt;span class=&quot;c&quot;&gt;# 设置远程仓库的HEAD指向master分支&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;也可以命令设置跟踪远程库和本地库&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://justcoding.iteye.com/blog/1830388&quot;&gt;Git 常用命令整理&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>2017-01-10T00:00:00+00:00</pubDate>
				<link>https://geek5.cn/blog/2017/01/10/GIT-common-cls.html</link>
				<guid isPermaLink="true">https://geek5.cn/blog/2017/01/10/GIT-common-cls.html</guid>
			</item>
		
			<item>
				<title>国际学习交流方法</title>
				<description>&lt;h2&gt;环境要求&lt;/h2&gt;

&lt;p&gt;搬瓦工VPS账号一个
Centos6.5系统
IPhone手机或Android手机一步&lt;/p&gt;

&lt;h2&gt;配置步骤&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;搬瓦工VPS账号购买和系统安装直接略过，现在购买支持支付宝，简直就是零门槛。&lt;/li&gt;
&lt;li&gt;安装shadowsocks&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yum install epel-release  
yum update  
yum install python-setuptools m2crypto supervisor  
easy_install pip  
pip install shadowsocks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;shadowsocks配置文件 &lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vi /etc/shadowsocks.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入以下JSON内容  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;quot;server&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;VPS服务器IP&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;quot;server_port&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18388&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;quot;local_address&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;quot;local_port&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;客户端连接密码&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rc4-md5&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;运行服务&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#ssserver -c /etc/shadowsocks.json -d start&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#通过参数运行&lt;/span&gt;
 ssserver -p &lt;span class=&quot;m&quot;&gt;18388&lt;/span&gt; -k geek5 -m rc4-md5 -d start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;停止服务&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; ssserver -c /etc/shadowsocks.json -d stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;客户端&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;IPhone手机从App store直接下载shadowsocks应用&lt;/li&gt;
&lt;li&gt;android手机可以从github上下载最新的shadowsocks版本，有兴趣的还可以研究一下客户端代码&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>2017-01-03T00:00:00+00:00</pubDate>
				<link>https://geek5.cn/blog/2017/01/03/over-the-wall-method.html</link>
				<guid isPermaLink="true">https://geek5.cn/blog/2017/01/03/over-the-wall-method.html</guid>
			</item>
		
			<item>
				<title>Git分支管理策略</title>
				<description>&lt;p&gt;如果你严肃对待编程，就必定会使用&amp;quot;版本管理系统&amp;quot;（Version Control System）。
眼下最流行的&amp;quot;版本管理系统&amp;quot;，非Git莫属。&lt;/p&gt;

&lt;p&gt;相比同类软件，Git有很多优点。其中很显著的一点，就是版本的分支（branch）和合并（merge）十分方便。有些传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称&amp;quot;快照&amp;quot;）的指针，因此非常快捷易用。
但是，太方便了也会产生副作用。如果你不加注意，很可能会留下一个枝节蔓生、四处开放的版本库，到处都是分支，完全看不出主干发展的脉络。&lt;/p&gt;
</description>
				<pubDate>2016-11-22T00:00:00+00:00</pubDate>
				<link>https://geek5.cn/blog/2016/11/22/Git-branch-method.html</link>
				<guid isPermaLink="true">https://geek5.cn/blog/2016/11/22/Git-branch-method.html</guid>
			</item>
		
			<item>
				<title>GIT如何删除错误提交的文件</title>
				<description>&lt;h2&gt;思路：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;创建和切换至临时分支&lt;/li&gt;
&lt;li&gt;删除误提交文件&lt;/li&gt;
&lt;li&gt;提交修改的内容&lt;/li&gt;
&lt;li&gt;切换至主线&lt;/li&gt;
&lt;li&gt;重组分支到主线版本&lt;/li&gt;
&lt;li&gt;删除临时分支运动&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;运行下面的git命令&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#创建和切换至临时分支&lt;/span&gt;
git checkout -b tempbranch &amp;lt;sha1-of-merge&amp;gt;

&lt;span class=&quot;c&quot;&gt;#删除误提交文件&lt;/span&gt;
git rm somefile

&lt;span class=&quot;c&quot;&gt;#提交修改的内容&lt;/span&gt;
git commit --amend

&lt;span class=&quot;c&quot;&gt;#切换至主线&lt;/span&gt;
git checkout master

&lt;span class=&quot;c&quot;&gt;#重组分支到主线版本&lt;/span&gt;
git rebase tempbranch

&lt;span class=&quot;c&quot;&gt;#删除临时分支运动&lt;/span&gt;
git branch -d tempbranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>2016-10-22T00:00:00+00:00</pubDate>
				<link>https://geek5.cn/blog/2016/10/22/GIT-issue-summary.html</link>
				<guid isPermaLink="true">https://geek5.cn/blog/2016/10/22/GIT-issue-summary.html</guid>
			</item>
		
			<item>
				<title>PHP-FPM多进程开机自启</title>
				<description>&lt;h2&gt;自启sh脚本文件start-php&lt;/h2&gt;

&lt;!--more--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#chkconfig: 2345 90 10&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#description: php-fpm service&lt;/span&gt;
/usr/sbin/php-fpm -y /etc/php-fpm-conf/php-fpm.conf
/usr/sbin/php-fpm -y /etc/php-fpm-conf/php-fpm.conf1
/usr/sbin/php-fpm -y /etc/php-fpm-conf/php-fpm.conf2
/usr/sbin/php-fpm -y /etc/php-fpm-conf/php-fpm.conf3
/usr/sbin/php-fpm -y /etc/php-fpm-conf/php-fpm.conf4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把start-php复制到/etc/rc.d/init.d/&lt;/p&gt;

&lt;p&gt;设置开机自启
&lt;code&gt;bash
chkconfig --add start-php
chkconfig start-php on
&lt;/code&gt;&lt;/p&gt;
</description>
				<pubDate>2016-10-19T00:00:00+00:00</pubDate>
				<link>https://geek5.cn/blog/2016/10/19/PHP-FPM-multi-process-auto-run.html</link>
				<guid isPermaLink="true">https://geek5.cn/blog/2016/10/19/PHP-FPM-multi-process-auto-run.html</guid>
			</item>
		
			<item>
				<title>2016 WEB 开发好东西汇总</title>
				<description>&lt;h2&gt;2016 Web 开发资源工具大搜罗&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/77717/2016-web-develop-tools-collection?from=20161009&quot;&gt;开源中国收集&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>2016-10-15T00:00:00+00:00</pubDate>
				<link>https://geek5.cn/blog/2016/10/15/WEB-development-summary.html</link>
				<guid isPermaLink="true">https://geek5.cn/blog/2016/10/15/WEB-development-summary.html</guid>
			</item>
		
			<item>
				<title>前端工程化汇总</title>
				<description>&lt;h2&gt;优秀博文&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://boke.io/ji-yu-gulphe-webpackde-qian-duan-gong-zuo-liu/&quot;&gt;基于gulp和webpack的前端工程化&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/demohi/learning-gulp&quot;&gt;learning-gulp&lt;/a&gt;
&amp;lt;!--more--&amp;gt;&lt;/p&gt;

&lt;p&gt;本来一起在研究前端自动化框架如何搭建和使用，结果鹅厂的同学们就开源了这么一个框架，经常有种莫名心想事成的感觉！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/QMUI/qmuidemo_web/master/public/style/images/independent/BannerForGithub_2x.png&quot; alt=&quot;QMUI&quot;&gt;&lt;/p&gt;

&lt;h1&gt;QMUI Web &lt;a href=&quot;https://github.com/QMUI/qmui_web/&quot; title=&quot;Version Number&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/generator-qmui.svg?style=flat&quot; alt=&quot;Version Number&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;一个旨在提高 UI 开发效率、快速产生项目 UI 的前端框架&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>2016-10-14T00:00:00+00:00</pubDate>
				<link>https://geek5.cn/blog/2016/10/14/font-end-autoproject-summary.html</link>
				<guid isPermaLink="true">https://geek5.cn/blog/2016/10/14/font-end-autoproject-summary.html</guid>
			</item>
		
			<item>
				<title>大前端自动化开发环境grunt使用教程汇总</title>
				<description>&lt;h2&gt;优秀博文&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/wangfupeng1988/article/details/46418203/&quot;&gt;用grunt搭建自动化的web前端开发环境-完整教程&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://i5ting.github.io/stuq-gulp/&quot;&gt;gulp教程&lt;/a&gt;
&amp;lt;!--more--&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>2016-10-09T00:00:00+00:00</pubDate>
				<link>https://geek5.cn/blog/2016/10/09/grunt-tutorial-summary.html</link>
				<guid isPermaLink="true">https://geek5.cn/blog/2016/10/09/grunt-tutorial-summary.html</guid>
			</item>
		
	</channel>
</rss>
